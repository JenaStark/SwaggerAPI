# Example YAML to get you started quickly.
# Be aware that YAML has indentation based scoping.
# Code completion support is available so start typing for available options.
swagger: '2.0'

# This is your document metadata
info:
  title: Bargain Bee API
  description: Move your app forward with the Bargain API
  version: "1.0.0"
# will be prefixed to all paths
basePath: /BargainBee/v1
# Describe your paths here
# /{company}/campaign ? / etc
paths:
  /campaigns:
    get:
      summary: All campaigns
      description: |
        Returns all campaigns that were entered the system
      tags:
        - Campaigns
      responses:
        200:
          description: An array of campaigns
          schema:
            type: array
            items:
              $ref: '#/definitions/Campaign'
    post:
      summary: Add a new campaign 
      description: ""
      tags:
        - Campaigns
      parameters:
        - in: body
          name: body
          description: Campaign object that needs to be added 
          required: true
          schema:
            $ref: "#/definitions/Campaign"
      responses:
        "405":
          description: Invalid input
  /users:
    get:
      summary: All Users
      description: |
        Returns all users in the system
      tags:
        - Users
      responses:
        200:
          description: An array of users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
    post:
      summary: Add a new user 
      description: ""
      tags:
        - Users
      parameters:
        - in: body
          name: body
          description: User object that needs to be added 
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "405":
          description: Invalid input
  /users/{roleId}:
    get:
      summary: Users by a specific role
      description: |
        Returns all users in the system with the roleId specified
      parameters:
      - in: path
        name: roleId
        description: Id of role you want to sort users by
        required: true
        type: integer
        format: uuid
        default: 1
        minimum: 1
        maximum: 3
      responses:
        200:
          description: An array of users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
  /campaigns/{id}/promotions:
    get:
      summary: Show Campaign Promotions
      description: |
        Returns all Promotions associated with a campaign
      tags:
        - Promotions
      parameters:
        - in: path
          name: id
          description: ID of campaign that needs to be fetched
          required: true
          type: integer
          format: uuid
      responses:
        200:
          description: An array of promotions
          schema:
            type: array
            items:
              $ref: '#/definitions/Promotion'
    post:
      summary: Add a new promotion to the campaign
      description: ""
      tags:
        - Promotions
      parameters:
        - in: path
          name: id
          description: ID of campaign that needs to be fetched
          required: true
          type: integer
          format: uuid
        - in: body
          name: body
          description: Promotion object that needs to be added to the specified campaign
          required: true
          schema:
            $ref: "#/definitions/Promotion"
      responses:
        "405":
          description: Invalid input
  /campaigns/{id}:
    get:
      summary: Show a Campaign 
      description: |
        Returns a campaign with the specified ID
      tags:
        - Campaigns
      parameters:
        - in: path
          name: id
          description: ID of campaign that needs to be fetched
          required: true
          type: integer
          format: uuid
      responses:
        200:
          description: A campaign object
          schema:
            type: object
            items:
              $ref: '#/definitions/Campaign'
  /campaigns/{campID}/promotions/{promoID}:
    get:
      summary: Show one Promotion
      description: |
        Returns a Promotion associated with a campaign
      tags:
        - Promotions
      parameters:
        - in: path
          name: campID
          description: ID of campaign that needs to be fetched
          required: true
          type: integer
          format: uuid
        - in: path
          name: promoID
          description: ID of promotion that needs to be fetched
          required: true
          type: integer
          format: uuid
      responses:
        200:
          description: returns promotion
          schema:
            $ref: '#/definitions/Promotion'
definitions: 
  User:
    type: object
    properties:
      UUID:
        type: integer
        format: uuid
      username: 
        type: string
        description: display name for this user
      role:
        $ref: '#/definitions/Role/properties/UUID'
  Role:
    type: object
    properties:
      UUID:
        type: integer
        format: uuid
        description: role ID associated with each different role available (1 - 3)
      name:
        type: string
        description: role name --> marketor, store employee, etc 
  Company-User:
    type: object
    properties:
      UserID:
        $ref: '#/definitions/User/properties/UUID'
      CompanyID:
        $ref: '#/definitions/Company/properties/UUID'
  Company:
    type: object
    properties:
      name:
        type: string
        description: company name
      UUID:
        type: integer
        format: uuid
  Company-Campaigns:
    type: object
    properties:
      companyID:
        $ref: '#/definitions/Company/properties/UUID'
      campaignID:
        $ref: '#/definitions/Campaign/properties/UUID'
  Campaign:
    type: object
    properties:
      UUID:
        type: integer
        format: uuid
      name:
        type: string
        description: campaign name
      companyID:
        $ref: '#/definitions/Company/properties/UUID'
  Campaign-Promotions:
    type: object
    properties:
      CampaignID:
        $ref: '#/definitions/Campaign/properties/UUID'
      PromotionID:
        $ref: '#/definitions/Promotion/properties/UUID'
  Image: 
    type: object
    properties:
      picture:
        type: string
        description: image url
      image_type:
        type: integer
        format: int16
        description: ID relating to what type of image this is--> reference or audit image
  Store:
    type: object
    properties:
      UUID:
        type: integer
        format: uuid
        description: store ID
      name:
        type: string
      companyID:
        $ref: '#/definitions/Company/properties/UUID'
  Location:
    type: object
    properties:
      UUID:
        type: integer
        format: uuid
      name:
        type: string
  Location-Store:
    type: object
    properties:
      StoreID:
        $ref: '#/definitions/Store/properties/UUID'
      LocationID:
        $ref: '#/definitions/Location/properties/UUID'
  Store-Shelf:
    type: object
    properties:
      StoreID:
        $ref: '#/definitions/Store/properties/UUID'
      ShelfID:
        $ref: '#/definitions/Shelf/properties/UUID'
  Shelf:
    type: object
    properties:
      UUID:
        type: integer
        format: uuid
  Bin: 
    type: object
    properties:
      UUID:
        type: integer
        format: uuid
  Shelf-Bin:
    type: object
    properties:
      ShelfID:
        $ref: '#/definitions/Shelf/properties/UUID'
      BinID:
        $ref: '#/definitions/Bin/properties/UUID'
  Product:
    type: object
    properties:
      UUID:
        type: integer
        format: uuid
      name:
        type: string
  Bin-Product:
    type: object
    properties:
      BinID:
        $ref: '#/definitions/Bin/properties/UUID'
      ProductID:
        $ref: '#/definitions/Product/properties/UUID'
  Promotion-ShelfBin:
    type: object
    properties:
      PromotionID:
        $ref: '#/definitions/Promotion/properties/UUID'
      ShelfID:
        $ref: '#/definitions/Shelf/properties/UUID'
      BinID:
        $ref: '#/definitions/Bin/properties/UUID'
  Promotion-Store:
    type: object
    properties:
      PromotionID:
        $ref: '#/definitions/Promotion/properties/UUID'
      StoreID:
        $ref: '#/definitions/Store/properties/UUID'
      completion:
        type: boolean
        description: whether or not the store completed the promotion
      time_complete:
        type: string
        format: full-date
        description: when the store completed the promotion or null
  Promotion:
    type: object
    properties:
      UUID:
        type: integer
        format: uuid
      name:
        type: string
        description: promotion name
      description:
        type: string
        description: promotion description 
      start:
        type: string
        format: date-time
        description: the starting date for this promotion
      end: 
        type: string
        format: date-time
        description: the ending date for this promotion
      image:
        $ref: '#/definitions/Image'
      posted:
        type: string
        format: full-date
        description: date promotion was posted
      status:
        type: string
        description: expiry status, shows if the promotion has already ended
      